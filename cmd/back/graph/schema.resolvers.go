package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"v-shi/cmd/back/graph/model"
	"v-shi/pkg/models"

	"github.com/jinzhu/copier"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, name string) (*model.Category, error) {
	category := models.Category{
		Name: name,
	}
	if err := r.Repo.Category.Create(ctx, &category); err != nil {
		return nil, err
	}

	resp := model.Category{}

	if err := copier.CopyWithOption(&resp, &category, copier.Option{
		IgnoreEmpty: false,
		DeepCopy:    true,
		// Converters: []copier.TypeConverter{
		// 	{
		// 		SrcType: time.Time{},
		// 		DstType: copier.String,
		// 		Fn: func(src interface{}) (interface{}, error) {
		// 			s, ok := src.(time.Time)

		// 			if !ok {
		// 				return nil, errors.New("src type not matching")
		// 			}

		// 			return s.Format(time.RFC3339), nil
		// 		},
		// 	},
		// },
	}); err != nil {
		return nil, err
	}

	return &resp, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, input model.UpdateCategory) (*string, error) {
	err := r.Repo.Category.UpdateByFields(ctx, &models.UpdateFields{
		Field: "id",
		Value: input.ID,
		Data: map[string]any{
			"name": input.Name,
		},
	})
	return nil, err

}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id int) (*model.Category, error) {
	return r.Repo.Category.FindByField(ctx, "id", id)
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) (*model.CategoriesResp, error) {
	categories, total, err := r.Repo.Category.All(ctx)
	if err != nil {
		return nil, err
	}
	return &model.CategoriesResp{
		List:  categories,
		Total: int(total),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
