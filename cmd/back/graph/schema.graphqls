# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Void
scalar Upload

#### Category Start
type Category {
  id: Int!
  name: String!
  created_at: Time!
  updated_at: Time!
}

type CategoryWithFoods {
  id: Int!
  name: String!
  created_at: Time!
  updated_at: Time!
  Foods: [Food!]!
}


## response
### read
type CategoryListResp {
  list: [Category!]!
  total: Int!
}

type CategoryWithFoodsListResp {
  list: [CategoryWithFoods!]!
  total: Int!
}

### update
input updateCategory {
  id: Int!
  name: String!
}

### create example with custom code
type CreateCategoryResponse {
  code: Int!
  success: Boolean!
  message: String!
  category: Category
}

## input
input FilterCategory {
  id: Int
  name: String
  start_time: String
  end_time: String
  food_name: String
}

#### Category END


#### Food Start
type Food {
  id: Int!
  name: String!
  description: String!
  shop_id: Int!
  created_at: Time!
  updated_at: Time!
  shop: Shop!
  Categories: [Category!]!
}
#### Food End



#### SHOP OWNER START
type ShopOwner {
  id: Int!
  name: String!
  email: String!
  password: String!
  created_at: Time!
  updated_at: Time!
  shops: [Shop!]!
}

## response
type ShopOwnerListResponse {
  list: [ShopOwner!]!
  total: Int!
}

## inputs
input createShopOwner {
  name: String!
  email: String!
  password: String!
}

input updateShopOwner {
  id: Int!
  name: String
  email: String
  password: String
}

input filterShopOwner {
  id: Int
  name: String
  email: String
  shop_id: Int
  shop_name: String
  page: Int!
  page_size: Int!
}

#### SHOP OWNER END



#### SHOP Start
type Shop {
  id: Int!
  name: String!
  logo_filename: String!
  created_at: Time!
  updated_at: Time!
  shop_owner: ShopOwner!
}

type ShopListResp {
  list: [Shop!]!
  total: Int!
}

input filterShop {
  id: Int
  name: String
  start_time: String
  end_time: String
  shop_owner_id: Int
  shop_owner_name: String
  page: Int!
  page_size: Int!
}

## inputs
input createShop {
  name: String!
  file: Upload!
  shop_owner_id: Int!
}

input updateShop {
  id: Int!
  name: String
  shop_owner_id: Int
}

# input updat

#### SHOP END


#### SHOP LOCATION START

type ShopLocation {
  id: Int!
  created_at: Time!
  updated_at: Time!
  lat: Float!
  lng: Float!
  shop_id: Int!
  shop: Shop!
}

type ShopLocationListResp {
  list: [ShopLocation!]!
  total: Int!
}

## inputs
input filterShopLocation {
  id: Int
  name: String
  description: String
  start_time: String
  end_time: String
  lat: Float
  lng: Float
  shop_id: Int
  shop_name: String
  page: Int!
  page_size: Int!
}

input createShopLocation {
  name: String!
  description: String
  lat: Float!
  lng: Float!
  shop_id: Int!
}

input updateShopLocation {
  id: Int!
  name: String
  description: String
  lat: Float
  lng: Float
  shop_id: Int
}

#### SHOP LOCATION END



type Query {
  # category
  category(id: Int!): Category!
  categories(input: FilterCategory!): CategoryListResp!
  categoryWithShop(id: Int!): CategoryWithFoods!
  categoriesWithShops(input: FilterCategory): CategoryWithFoodsListResp!
  # categories: [Category!]!

  # shop owner
  ShopOwners(input: filterShopOwner!): ShopOwnerListResponse!

  # shop
  shops(input: filterShop!): ShopListResp!

  # shop Locations
  shopLocations(input: filterShopLocation!): ShopLocationListResp!


  FileLogo(logo_filename: String!): String!
}

type Mutation {
  # category
  createCategory(name: String!): Category!
  updateCategory(input: updateCategory!): Void
  deleteCategory(input: Int!): Void

  # shop owner
  createShopOwner(input: createShopOwner!): Void
  updateShopOwner(input: updateShopOwner!): Void
  deleteShopOwners(ids: [Int!]!): Void

  # shop
  createShop(input: createShop!): Void
  updateShop(input: updateShop!): Void
  deleteShops(ids: [Int!]!): Void

  # shop location
  createShopLocation(input: createShopLocation!): Void
  updateShopLocation(input: updateShopLocation!): Void
  deleteShopLocations(ids: [Int!]!): Void
}

# type Todo {
#   id: ID!
#   text: String!
#   done: Boolean!
#   user: User!
# }

# type User {
#   id: ID!
#   name: String!
# }

# type Query {
#   todos: [Todo!]!
# }

# input NewTodo {
#   text: String!
#   userId: String!
# }

# type Mutation {
#   createTodo(input: NewTodo!): Todo!
# }
